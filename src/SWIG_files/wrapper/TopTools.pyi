from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TopoDS import *
from OCC.Core.TopLoc import *
from OCC.Core.Message import *
from OCC.Core.TopAbs import *
from OCC.Core.TCollection import *

TopTools_LocationSetPtr = NewType('TopTools_LocationSetPtr', TopTools_LocationSet)

class TopTools:
	@staticmethod
	def Dummy(self, I: int) -> None: ...

class TopTools_LocationSet:
	def __init__(self) -> None: ...
	def Add(self, L: TopLoc_Location) -> int: ...
	def Clear(self) -> None: ...
	def GetProgress(self) -> Message_ProgressIndicator: ...
	def Index(self, L: TopLoc_Location) -> int: ...
	def Location(self, I: int) -> TopLoc_Location: ...
	def SetProgress(self, PR: Message_ProgressIndicator) -> None: ...

class TopTools_MutexForShapeProvider:
	def __init__(self) -> None: ...
	def CreateMutexForShape(self, theShape: TopoDS_Shape) -> None: ...
	def CreateMutexesForSubShapes(self, theShape: TopoDS_Shape, theType: TopAbs_ShapeEnum) -> None: ...
	def GetMutex(self, theShape: TopoDS_Shape) -> Standard_Mutex: ...
	def RemoveAllMutexes(self) -> None: ...

class TopTools_OrientedShapeMapHasher:
	@staticmethod
	def HashCode(self, theShape: TopoDS_Shape, theUpperBound: int) -> int: ...
	@staticmethod
	def IsEqual(self, S1: TopoDS_Shape, S2: TopoDS_Shape) -> bool: ...

class TopTools_ShapeMapHasher:
	@staticmethod
	def HashCode(self, theShape: TopoDS_Shape, theUpperBound: int) -> int: ...
	@staticmethod
	def IsEqual(self, S1: TopoDS_Shape, S2: TopoDS_Shape) -> bool: ...

class TopTools_ShapeSet:
	def __init__(self) -> None: ...
	def Add(self, S: TopoDS_Shape) -> int: ...
	def AddGeometry(self, S: TopoDS_Shape) -> None: ...
	def AddShapes(self, S1: TopoDS_Shape, S2: TopoDS_Shape) -> None: ...
	def ChangeLocations(self) -> TopTools_LocationSet: ...
	def Check(self, T: TopAbs_ShapeEnum, S: TopoDS_Shape) -> None: ...
	def Clear(self) -> None: ...
	def DumpExtent(self, S: TCollection_AsciiString) -> None: ...
	def FormatNb(self) -> int: ...
	def GetProgress(self) -> Message_ProgressIndicator: ...
	def Index(self, S: TopoDS_Shape) -> int: ...
	def Locations(self) -> TopTools_LocationSet: ...
	def NbShapes(self) -> int: ...
	def SetFormatNb(self, theFormatNb: int) -> None: ...
	def SetProgress(self, PR: Message_ProgressIndicator) -> None: ...
	def Shape(self, I: int) -> TopoDS_Shape: ...
