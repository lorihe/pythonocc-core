from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.Expr import *
from OCC.Core.TCollection import *


class ExprIntrp:
	pass

class ExprIntrp_Analysis:
	def __init__(self) -> None: ...
	def GetFunction(self, name: TCollection_AsciiString) -> Expr_NamedFunction: ...
	def GetNamed(self, name: TCollection_AsciiString) -> Expr_NamedExpression: ...
	def IsExpStackEmpty(self) -> bool: ...
	def IsRelStackEmpty(self) -> bool: ...
	def Pop(self) -> Expr_GeneralExpression: ...
	def PopFunction(self) -> Expr_GeneralFunction: ...
	def PopName(self) -> TCollection_AsciiString: ...
	def PopRelation(self) -> Expr_GeneralRelation: ...
	def PopValue(self) -> int: ...
	def Push(self, exp: Expr_GeneralExpression) -> None: ...
	def PushFunction(self, func: Expr_GeneralFunction) -> None: ...
	def PushName(self, name: TCollection_AsciiString) -> None: ...
	def PushRelation(self, rel: Expr_GeneralRelation) -> None: ...
	def PushValue(self, degree: int) -> None: ...
	def ResetAll(self) -> None: ...
	def SetMaster(self, agen: ExprIntrp_Generator) -> None: ...
	def Use(self, func: Expr_NamedFunction) -> None: ...
	def Use(self, named: Expr_NamedExpression) -> None: ...

class ExprIntrp_Generator(Standard_Transient):
	def GetFunction(self, name: TCollection_AsciiString) -> Expr_NamedFunction: ...
	def GetFunctions(self) -> ExprIntrp_SequenceOfNamedFunction: ...
	def GetNamed(self) -> ExprIntrp_SequenceOfNamedExpression: ...
	def GetNamed(self, name: TCollection_AsciiString) -> Expr_NamedExpression: ...
	def Use(self, func: Expr_NamedFunction) -> None: ...
	def Use(self, named: Expr_NamedExpression) -> None: ...

class ExprIntrp_GenExp(ExprIntrp_Generator):
	@staticmethod
	def Create(self) -> ExprIntrp_GenExp: ...
	def Expression(self) -> Expr_GeneralExpression: ...
	def IsDone(self) -> bool: ...
	def Process(self, str: TCollection_AsciiString) -> None: ...

class ExprIntrp_GenFct(ExprIntrp_Generator):
	@staticmethod
	def Create(self) -> ExprIntrp_GenFct: ...
	def IsDone(self) -> bool: ...
	def Process(self, str: TCollection_AsciiString) -> None: ...

class ExprIntrp_GenRel(ExprIntrp_Generator):
	@staticmethod
	def Create(self) -> ExprIntrp_GenRel: ...
	def IsDone(self) -> bool: ...
	def Process(self, str: TCollection_AsciiString) -> None: ...
	def Relation(self) -> Expr_GeneralRelation: ...
