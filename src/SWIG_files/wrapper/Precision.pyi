from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *


class Precision:
	@staticmethod
	def Angular(self) -> float: ...
	@staticmethod
	def Approximation(self) -> float: ...
	@staticmethod
	def Confusion(self) -> float: ...
	@staticmethod
	def Infinite(self) -> float: ...
	@staticmethod
	def Intersection(self) -> float: ...
	@staticmethod
	def IsInfinite(self, R: float) -> bool: ...
	@staticmethod
	def IsNegativeInfinite(self, R: float) -> bool: ...
	@staticmethod
	def IsPositiveInfinite(self, R: float) -> bool: ...
	@staticmethod
	def PApproximation(self, T: float) -> float: ...
	@staticmethod
	def PApproximation(self) -> float: ...
	@staticmethod
	def PConfusion(self, T: float) -> float: ...
	@staticmethod
	def PConfusion(self) -> float: ...
	@staticmethod
	def PIntersection(self, T: float) -> float: ...
	@staticmethod
	def PIntersection(self) -> float: ...
	@staticmethod
	def Parametric(self, P: float, T: float) -> float: ...
	@staticmethod
	def Parametric(self, P: float) -> float: ...
	@staticmethod
	def SquareConfusion(self) -> float: ...
	@staticmethod
	def SquarePConfusion(self) -> float: ...
