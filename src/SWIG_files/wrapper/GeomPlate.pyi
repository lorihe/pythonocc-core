from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.Adaptor3d import *
from OCC.Core.gp import *
from OCC.Core.TColgp import *
from OCC.Core.Geom import *
from OCC.Core.TColStd import *
from OCC.Core.TColGeom2d import *
from OCC.Core.Message import *
from OCC.Core.Geom2d import *
from OCC.Core.GeomLProp import *
from OCC.Core.Adaptor2d import *
from OCC.Core.Law import *
from OCC.Core.AdvApp2Var import *
from OCC.Core.GeomAbs import *
from OCC.Core.Plate import *


class GeomPlate_Aij:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, anInd1: int, anInd2: int, aVec: gp_Vec) -> None: ...

class GeomPlate_BuildAveragePlane:
	@overload
	def __init__(self, Pts: TColgp_HArray1OfPnt, NbBoundPoints: int, Tol: float, POption: int, NOption: int) -> None: ...
	@overload
	def __init__(self, Normals: TColgp_SequenceOfVec, Pts: TColgp_HArray1OfPnt) -> None: ...
	@staticmethod
	def HalfSpace(self, NewNormals: TColgp_SequenceOfVec, Normals: TColgp_SequenceOfVec, Bset: GeomPlate_SequenceOfAij, LinTol: float, AngTol: float) -> bool: ...
	def IsLine(self) -> bool: ...
	def IsPlane(self) -> bool: ...
	def Line(self) -> Geom_Line: ...
	def MinMaxBox(self) -> Tuple[float, float, float, float]: ...
	def Plane(self) -> Geom_Plane: ...

class GeomPlate_BuildPlateSurface:
	@overload
	def __init__(self, NPoints: TColStd_HArray1OfInteger, TabCurve: GeomPlate_HArray1OfHCurve, Tang: TColStd_HArray1OfInteger, Degree: int, NbIter: Optional[int], Tol2d: Optional[float], Tol3d: Optional[float], TolAng: Optional[float], TolCurv: Optional[float], Anisotropie: Optional[bool]) -> None: ...
	@overload
	def __init__(self, Surf: Geom_Surface, Degree: Optional[int], NbPtsOnCur: Optional[int], NbIter: Optional[int], Tol2d: Optional[float], Tol3d: Optional[float], TolAng: Optional[float], TolCurv: Optional[float], Anisotropie: Optional[bool]) -> None: ...
	@overload
	def __init__(self, Degree: Optional[int], NbPtsOnCur: Optional[int], NbIter: Optional[int], Tol2d: Optional[float], Tol3d: Optional[float], TolAng: Optional[float], TolCurv: Optional[float], Anisotropie: Optional[bool]) -> None: ...
	def Add(self, Cont: GeomPlate_CurveConstraint) -> None: ...
	def Add(self, Cont: GeomPlate_PointConstraint) -> None: ...
	def CurveConstraint(self, order: int) -> GeomPlate_CurveConstraint: ...
	def Curves2d(self) -> TColGeom2d_HArray1OfCurve: ...
	def Disc2dContour(self, nbp: int, Seq2d: TColgp_SequenceOfXY) -> None: ...
	def Disc3dContour(self, nbp: int, iordre: int, Seq3d: TColgp_SequenceOfXYZ) -> None: ...
	def G0Error(self) -> float: ...
	def G0Error(self, Index: int) -> float: ...
	def G1Error(self) -> float: ...
	def G1Error(self, Index: int) -> float: ...
	def G2Error(self) -> float: ...
	def G2Error(self, Index: int) -> float: ...
	def Init(self) -> None: ...
	def IsDone(self) -> bool: ...
	def LoadInitSurface(self, Surf: Geom_Surface) -> None: ...
	def Order(self) -> TColStd_HArray1OfInteger: ...
	def Perform(self, aProgress: Optional[Message_ProgressIndicator]) -> None: ...
	def PointConstraint(self, order: int) -> GeomPlate_PointConstraint: ...
	def Sense(self) -> TColStd_HArray1OfInteger: ...
	def SetNbBounds(self, NbBounds: int) -> None: ...
	def SurfInit(self) -> Geom_Surface: ...
	def Surface(self) -> GeomPlate_Surface: ...

class GeomPlate_CurveConstraint(Standard_Transient):
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, Boundary: Adaptor3d_HCurve, Order: int, NPt: Optional[int], TolDist: Optional[float], TolAng: Optional[float], TolCurv: Optional[float]) -> None: ...
	def Curve2dOnSurf(self) -> Geom2d_Curve: ...
	def Curve3d(self) -> Adaptor3d_HCurve: ...
	def D0(self, U: float, P: gp_Pnt) -> None: ...
	def D1(self, U: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	def D2(self, U: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec, V4: gp_Vec, V5: gp_Vec) -> None: ...
	def FirstParameter(self) -> float: ...
	def G0Criterion(self, U: float) -> float: ...
	def G1Criterion(self, U: float) -> float: ...
	def G2Criterion(self, U: float) -> float: ...
	def LPropSurf(self, U: float) -> GeomLProp_SLProps: ...
	def LastParameter(self) -> float: ...
	def Length(self) -> float: ...
	def NbPoints(self) -> int: ...
	def Order(self) -> int: ...
	def ProjectedCurve(self) -> Adaptor2d_HCurve2d: ...
	def SetCurve2dOnSurf(self, Curve2d: Geom2d_Curve) -> None: ...
	def SetG0Criterion(self, G0Crit: Law_Function) -> None: ...
	def SetG1Criterion(self, G1Crit: Law_Function) -> None: ...
	def SetG2Criterion(self, G2Crit: Law_Function) -> None: ...
	def SetNbPoints(self, NewNb: int) -> None: ...
	def SetOrder(self, Order: int) -> None: ...
	def SetProjectedCurve(self, Curve2d: Adaptor2d_HCurve2d, TolU: float, TolV: float) -> None: ...

class GeomPlate_MakeApprox:
	@overload
	def __init__(self, SurfPlate: GeomPlate_Surface, PlateCrit: AdvApp2Var_Criterion, Tol3d: float, Nbmax: int, dgmax: int, Continuity: Optional[GeomAbs_Shape], EnlargeCoeff: Optional[float]) -> None: ...
	@overload
	def __init__(self, SurfPlate: GeomPlate_Surface, Tol3d: float, Nbmax: int, dgmax: int, dmax: float, CritOrder: Optional[int], Continuity: Optional[GeomAbs_Shape], EnlargeCoeff: Optional[float]) -> None: ...
	def ApproxError(self) -> float: ...
	def CriterionError(self) -> float: ...
	def Surface(self) -> Geom_BSplineSurface: ...

class GeomPlate_PlateG0Criterion(AdvApp2Var_Criterion):
	def __init__(self, Data: TColgp_SequenceOfXY, G0Data: TColgp_SequenceOfXYZ, Maximum: float, Type: Optional[AdvApp2Var_CriterionType], Repart: Optional[AdvApp2Var_CriterionRepartition]) -> None: ...
	def IsSatisfied(self, P: AdvApp2Var_Patch) -> bool: ...
	def Value(self, P: AdvApp2Var_Patch, C: AdvApp2Var_Context) -> None: ...

class GeomPlate_PlateG1Criterion(AdvApp2Var_Criterion):
	def __init__(self, Data: TColgp_SequenceOfXY, G1Data: TColgp_SequenceOfXYZ, Maximum: float, Type: Optional[AdvApp2Var_CriterionType], Repart: Optional[AdvApp2Var_CriterionRepartition]) -> None: ...
	def IsSatisfied(self, P: AdvApp2Var_Patch) -> bool: ...
	def Value(self, P: AdvApp2Var_Patch, C: AdvApp2Var_Context) -> None: ...

class GeomPlate_PointConstraint(Standard_Transient):
	@overload
	def __init__(self, Pt: gp_Pnt, Order: int, TolDist: Optional[float]) -> None: ...
	@overload
	def __init__(self, U: float, V: float, Surf: Geom_Surface, Order: int, TolDist: Optional[float], TolAng: Optional[float], TolCurv: Optional[float]) -> None: ...
	def D0(self, P: gp_Pnt) -> None: ...
	def D1(self, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	def D2(self, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec, V4: gp_Vec, V5: gp_Vec) -> None: ...
	def G0Criterion(self) -> float: ...
	def G1Criterion(self) -> float: ...
	def G2Criterion(self) -> float: ...
	def HasPnt2dOnSurf(self) -> bool: ...
	def LPropSurf(self) -> GeomLProp_SLProps: ...
	def Order(self) -> int: ...
	def Pnt2dOnSurf(self) -> gp_Pnt2d: ...
	def SetG0Criterion(self, TolDist: float) -> None: ...
	def SetG1Criterion(self, TolAng: float) -> None: ...
	def SetG2Criterion(self, TolCurv: float) -> None: ...
	def SetOrder(self, Order: int) -> None: ...
	def SetPnt2dOnSurf(self, Pnt: gp_Pnt2d) -> None: ...

class GeomPlate_Surface(Geom_Surface):
	def __init__(self, Surfinit: Geom_Surface, Surfinter: Plate_Plate) -> None: ...
	def Bounds(self) -> Tuple[float, float, float, float]: ...
	def CallSurfinit(self) -> Geom_Surface: ...
	def Constraints(self, Seq: TColgp_SequenceOfXY) -> None: ...
	def Continuity(self) -> GeomAbs_Shape: ...
	def Copy(self) -> Geom_Geometry: ...
	def D0(self, U: float, V: float, P: gp_Pnt) -> None: ...
	def D1(self, U: float, V: float, P: gp_Pnt, D1U: gp_Vec, D1V: gp_Vec) -> None: ...
	def D2(self, U: float, V: float, P: gp_Pnt, D1U: gp_Vec, D1V: gp_Vec, D2U: gp_Vec, D2V: gp_Vec, D2UV: gp_Vec) -> None: ...
	def D3(self, U: float, V: float, P: gp_Pnt, D1U: gp_Vec, D1V: gp_Vec, D2U: gp_Vec, D2V: gp_Vec, D2UV: gp_Vec, D3U: gp_Vec, D3V: gp_Vec, D3UUV: gp_Vec, D3UVV: gp_Vec) -> None: ...
	def DN(self, U: float, V: float, Nu: int, Nv: int) -> gp_Vec: ...
	def IsCNu(self, N: int) -> bool: ...
	def IsCNv(self, N: int) -> bool: ...
	def IsUClosed(self) -> bool: ...
	def IsUPeriodic(self) -> bool: ...
	def IsVClosed(self) -> bool: ...
	def IsVPeriodic(self) -> bool: ...
	def ParametricTransformation(self, T: gp_Trsf) -> gp_GTrsf2d: ...
	def RealBounds(self) -> Tuple[float, float, float, float]: ...
	def SetBounds(self, Umin: float, Umax: float, Vmin: float, Vmax: float) -> None: ...
	def Transform(self, T: gp_Trsf) -> None: ...
	def TransformParameters(self, T: gp_Trsf) -> Tuple[float, float]: ...
	def UIso(self, U: float) -> Geom_Curve: ...
	def UPeriod(self) -> float: ...
	def UReverse(self) -> None: ...
	def UReversedParameter(self, U: float) -> float: ...
	def VIso(self, V: float) -> Geom_Curve: ...
	def VPeriod(self) -> float: ...
	def VReverse(self) -> None: ...
	def VReversedParameter(self, V: float) -> float: ...
