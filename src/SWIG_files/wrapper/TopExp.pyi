from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.TopoDS import *
from OCC.Core.TopAbs import *
from OCC.Core.TopTools import *

TopExp_Stack = NewType('TopExp_Stack', TopoDS_Iterator)

class TopExp:
	@staticmethod
	def CommonVertex(self, E1: TopoDS_Edge, E2: TopoDS_Edge, V: TopoDS_Vertex) -> bool: ...
	@staticmethod
	def FirstVertex(self, E: TopoDS_Edge, CumOri: Optional[bool]) -> TopoDS_Vertex: ...
	@staticmethod
	def LastVertex(self, E: TopoDS_Edge, CumOri: Optional[bool]) -> TopoDS_Vertex: ...
	@staticmethod
	def MapShapes(self, S: TopoDS_Shape, T: TopAbs_ShapeEnum, M: TopTools_IndexedMapOfShape) -> None: ...
	@staticmethod
	def MapShapes(self, S: TopoDS_Shape, M: TopTools_IndexedMapOfShape) -> None: ...
	@staticmethod
	def MapShapes(self, S: TopoDS_Shape, M: TopTools_MapOfShape) -> None: ...
	@staticmethod
	def MapShapesAndAncestors(self, S: TopoDS_Shape, TS: TopAbs_ShapeEnum, TA: TopAbs_ShapeEnum, M: TopTools_IndexedDataMapOfShapeListOfShape) -> None: ...
	@staticmethod
	def MapShapesAndUniqueAncestors(self, S: TopoDS_Shape, TS: TopAbs_ShapeEnum, TA: TopAbs_ShapeEnum, M: TopTools_IndexedDataMapOfShapeListOfShape, useOrientation: Optional[bool]) -> None: ...
	@staticmethod
	def Vertices(self, E: TopoDS_Edge, Vfirst: TopoDS_Vertex, Vlast: TopoDS_Vertex, CumOri: Optional[bool]) -> None: ...
	@staticmethod
	def Vertices(self, W: TopoDS_Wire, Vfirst: TopoDS_Vertex, Vlast: TopoDS_Vertex) -> None: ...

class TopExp_Explorer:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, S: TopoDS_Shape, ToFind: TopAbs_ShapeEnum, ToAvoid: Optional[TopAbs_ShapeEnum]) -> None: ...
	def Clear(self) -> None: ...
	def Current(self) -> TopoDS_Shape: ...
	def Depth(self) -> int: ...
	def Destroy(self) -> None: ...
	def Init(self, S: TopoDS_Shape, ToFind: TopAbs_ShapeEnum, ToAvoid: Optional[TopAbs_ShapeEnum]) -> None: ...
	def More(self) -> bool: ...
	def Next(self) -> None: ...
	def ReInit(self) -> None: ...
	def Value(self) -> TopoDS_Shape: ...
