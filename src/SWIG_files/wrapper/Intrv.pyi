from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *


class Intrv_Position(IntEnum):
	Intrv_Before: int = ...
	Intrv_JustBefore: int = ...
	Intrv_OverlappingAtStart: int = ...
	Intrv_JustEnclosingAtEnd: int = ...
	Intrv_Enclosing: int = ...
	Intrv_JustOverlappingAtStart: int = ...
	Intrv_Similar: int = ...
	Intrv_JustEnclosingAtStart: int = ...
	Intrv_Inside: int = ...
	Intrv_JustOverlappingAtEnd: int = ...
	Intrv_OverlappingAtEnd: int = ...
	Intrv_JustAfter: int = ...
	Intrv_After: int = ...
Intrv_Before = Intrv_Position.Intrv_Before
Intrv_JustBefore = Intrv_Position.Intrv_JustBefore
Intrv_OverlappingAtStart = Intrv_Position.Intrv_OverlappingAtStart
Intrv_JustEnclosingAtEnd = Intrv_Position.Intrv_JustEnclosingAtEnd
Intrv_Enclosing = Intrv_Position.Intrv_Enclosing
Intrv_JustOverlappingAtStart = Intrv_Position.Intrv_JustOverlappingAtStart
Intrv_Similar = Intrv_Position.Intrv_Similar
Intrv_JustEnclosingAtStart = Intrv_Position.Intrv_JustEnclosingAtStart
Intrv_Inside = Intrv_Position.Intrv_Inside
Intrv_JustOverlappingAtEnd = Intrv_Position.Intrv_JustOverlappingAtEnd
Intrv_OverlappingAtEnd = Intrv_Position.Intrv_OverlappingAtEnd
Intrv_JustAfter = Intrv_Position.Intrv_JustAfter
Intrv_After = Intrv_Position.Intrv_After

class Intrv_Interval:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, Start: float, End: float) -> None: ...
	@overload
	def __init__(self, Start: float, TolStart: Standard_ShortReal, End: float, TolEnd: Standard_ShortReal) -> None: ...
	def Bounds(self, TolStart: Standard_ShortReal, TolEnd: Standard_ShortReal) -> Tuple[float, float]: ...
	def CutAtEnd(self, End: float, TolEnd: Standard_ShortReal) -> None: ...
	def CutAtStart(self, Start: float, TolStart: Standard_ShortReal) -> None: ...
	def End(self) -> float: ...
	def FuseAtEnd(self, End: float, TolEnd: Standard_ShortReal) -> None: ...
	def FuseAtStart(self, Start: float, TolStart: Standard_ShortReal) -> None: ...
	def IsAfter(self, Other: Intrv_Interval) -> bool: ...
	def IsBefore(self, Other: Intrv_Interval) -> bool: ...
	def IsEnclosing(self, Other: Intrv_Interval) -> bool: ...
	def IsInside(self, Other: Intrv_Interval) -> bool: ...
	def IsJustAfter(self, Other: Intrv_Interval) -> bool: ...
	def IsJustBefore(self, Other: Intrv_Interval) -> bool: ...
	def IsJustEnclosingAtEnd(self, Other: Intrv_Interval) -> bool: ...
	def IsJustEnclosingAtStart(self, Other: Intrv_Interval) -> bool: ...
	def IsJustOverlappingAtEnd(self, Other: Intrv_Interval) -> bool: ...
	def IsJustOverlappingAtStart(self, Other: Intrv_Interval) -> bool: ...
	def IsOverlappingAtEnd(self, Other: Intrv_Interval) -> bool: ...
	def IsOverlappingAtStart(self, Other: Intrv_Interval) -> bool: ...
	def IsProbablyEmpty(self) -> bool: ...
	def IsSimilar(self, Other: Intrv_Interval) -> bool: ...
	def Position(self, Other: Intrv_Interval) -> Intrv_Position: ...
	def SetEnd(self, End: float, TolEnd: Standard_ShortReal) -> None: ...
	def SetStart(self, Start: float, TolStart: Standard_ShortReal) -> None: ...
	def Start(self) -> float: ...
	def TolEnd(self) -> Standard_ShortReal: ...
	def TolStart(self) -> Standard_ShortReal: ...

class Intrv_Intervals:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, Int: Intrv_Interval) -> None: ...
	@overload
	def __init__(self, Int: Intrv_Intervals) -> None: ...
	def Intersect(self, Tool: Intrv_Interval) -> None: ...
	def Intersect(self, Tool: Intrv_Intervals) -> None: ...
	def NbIntervals(self) -> int: ...
	def Subtract(self, Tool: Intrv_Interval) -> None: ...
	def Subtract(self, Tool: Intrv_Intervals) -> None: ...
	def Unite(self, Tool: Intrv_Interval) -> None: ...
	def Unite(self, Tool: Intrv_Intervals) -> None: ...
	def Value(self, Index: int) -> Intrv_Interval: ...
	def XUnite(self, Tool: Intrv_Interval) -> None: ...
	def XUnite(self, Tool: Intrv_Intervals) -> None: ...
