from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.math import *
from OCC.Core.TColgp import *
from OCC.Core.gp import *
from OCC.Core.TColStd import *


class AppParCurves_Constraint(IntEnum):
	AppParCurves_NoConstraint: int = ...
	AppParCurves_PassPoint: int = ...
	AppParCurves_TangencyPoint: int = ...
	AppParCurves_CurvaturePoint: int = ...
AppParCurves_NoConstraint = AppParCurves_Constraint.AppParCurves_NoConstraint
AppParCurves_PassPoint = AppParCurves_Constraint.AppParCurves_PassPoint
AppParCurves_TangencyPoint = AppParCurves_Constraint.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = AppParCurves_Constraint.AppParCurves_CurvaturePoint

class AppParCurves:
	@staticmethod
	def Bernstein(self, NbPoles: int, U: math_Vector, A: math_Matrix, DA: math_Matrix) -> None: ...
	@staticmethod
	def BernsteinMatrix(self, NbPoles: int, U: math_Vector, A: math_Matrix) -> None: ...
	@staticmethod
	def SecondDerivativeBernstein(self, U: float, DDA: math_Vector) -> None: ...
	@staticmethod
	def SplineFunction(self, NbPoles: int, Degree: int, Parameters: math_Vector, FlatKnots: math_Vector, A: math_Matrix, DA: math_Matrix, Index: math_IntegerVector) -> None: ...

class AppParCurves_ConstraintCouple:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, TheIndex: int, Cons: AppParCurves_Constraint) -> None: ...
	def Constraint(self) -> AppParCurves_Constraint: ...
	def Index(self) -> int: ...
	def SetConstraint(self, Cons: AppParCurves_Constraint) -> None: ...
	def SetIndex(self, TheIndex: int) -> None: ...

class AppParCurves_MultiCurve:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, NbPol: int) -> None: ...
	@overload
	def __init__(self, tabMU: AppParCurves_Array1OfMultiPoint) -> None: ...
	def Curve(self, CuIndex: int, TabPnt: TColgp_Array1OfPnt) -> None: ...
	def Curve(self, CuIndex: int, TabPnt: TColgp_Array1OfPnt2d) -> None: ...
	def D1(self, CuIndex: int, U: float, Pt: gp_Pnt, V1: gp_Vec) -> None: ...
	def D1(self, CuIndex: int, U: float, Pt: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	def D2(self, CuIndex: int, U: float, Pt: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	def D2(self, CuIndex: int, U: float, Pt: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	def Degree(self) -> int: ...
	def Dimension(self, CuIndex: int) -> int: ...
	def NbCurves(self) -> int: ...
	def NbPoles(self) -> int: ...
	def Pole(self, CuIndex: int, Nieme: int) -> gp_Pnt: ...
	def Pole2d(self, CuIndex: int, Nieme: int) -> gp_Pnt2d: ...
	def SetNbPoles(self, nbPoles: int) -> None: ...
	def SetValue(self, Index: int, MPoint: AppParCurves_MultiPoint) -> None: ...
	def Transform(self, CuIndex: int, x: float, dx: float, y: float, dy: float, z: float, dz: float) -> None: ...
	def Transform2d(self, CuIndex: int, x: float, dx: float, y: float, dy: float) -> None: ...
	def Value(self, Index: int) -> AppParCurves_MultiPoint: ...
	def Value(self, CuIndex: int, U: float, Pt: gp_Pnt) -> None: ...
	def Value(self, CuIndex: int, U: float, Pt: gp_Pnt2d) -> None: ...

class AppParCurves_MultiPoint:
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, NbPoints: int, NbPoints2d: int) -> None: ...
	@overload
	def __init__(self, tabP: TColgp_Array1OfPnt) -> None: ...
	@overload
	def __init__(self, tabP2d: TColgp_Array1OfPnt2d) -> None: ...
	@overload
	def __init__(self, tabP: TColgp_Array1OfPnt, tabP2d: TColgp_Array1OfPnt2d) -> None: ...
	def Dimension(self, Index: int) -> int: ...
	def NbPoints(self) -> int: ...
	def NbPoints2d(self) -> int: ...
	def Point(self, Index: int) -> gp_Pnt: ...
	def Point2d(self, Index: int) -> gp_Pnt2d: ...
	def SetPoint(self, Index: int, Point: gp_Pnt) -> None: ...
	def SetPoint2d(self, Index: int, Point: gp_Pnt2d) -> None: ...
	def Transform(self, CuIndex: int, x: float, dx: float, y: float, dy: float, z: float, dz: float) -> None: ...
	def Transform2d(self, CuIndex: int, x: float, dx: float, y: float, dy: float) -> None: ...

class AppParCurves_MultiBSpCurve(AppParCurves_MultiCurve):
	@overload
	def __init__(self) -> None: ...
	@overload
	def __init__(self, NbPol: int) -> None: ...
	@overload
	def __init__(self, tabMU: AppParCurves_Array1OfMultiPoint, Knots: TColStd_Array1OfReal, Mults: TColStd_Array1OfInteger) -> None: ...
	@overload
	def __init__(self, SC: AppParCurves_MultiCurve, Knots: TColStd_Array1OfReal, Mults: TColStd_Array1OfInteger) -> None: ...
	def D1(self, CuIndex: int, U: float, Pt: gp_Pnt, V1: gp_Vec) -> None: ...
	def D1(self, CuIndex: int, U: float, Pt: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	def D2(self, CuIndex: int, U: float, Pt: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	def D2(self, CuIndex: int, U: float, Pt: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	def Degree(self) -> int: ...
	def Knots(self) -> TColStd_Array1OfReal: ...
	def Multiplicities(self) -> TColStd_Array1OfInteger: ...
	def SetKnots(self, theKnots: TColStd_Array1OfReal) -> None: ...
	def SetMultiplicities(self, theMults: TColStd_Array1OfInteger) -> None: ...
	def Value(self, CuIndex: int, U: float, Pt: gp_Pnt) -> None: ...
	def Value(self, CuIndex: int, U: float, Pt: gp_Pnt2d) -> None: ...
